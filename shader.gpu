

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 TranslationMatrix;
uniform mat4 NormalMatrix;
varying vec3 varColor;
uniform bool lighting;
uniform vec3 lightPos;

uniform vec2 pointPos;
uniform float scaleFactor;
varying vec2 varTexture;
uniform vec3 pointTranslation;

mat4 translation(float tx, float ty, float tz) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = tx;
    dst[3][ 1] = ty;
    dst[3][ 2] = tz;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    vec4 s = translation(-pointPos.x,-pointPos.y,0.0)*vec4(texture,0.,1.);
    vec4 sc = scaling(scaleFactor)*s;
    vec4 scl = translation(pointPos.x,pointPos.y,0.0)*sc;
    varTexture = vec2(scl.x,scl.y);
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec4 norm = NormalMatrix*vec4(normal,1.0);
    vec3 N = normalize(vec3(norm));
    vec3 L = normalize(lightPos - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 80.0);
    }
    vec3 ambientColor = vec3(0.0,0.1,0.0);
    vec3 diffuseColor = vec3(0.0,0.7,0.0);
    vec3 specularColor = vec3(0.0,1.0,0.0);;
    varColor = vec3(ambientColor +
                lambertian * diffuseColor +
                specular * specularColor);
    gl_Position = vertPos4;
    if(lighting){
        gl_Position = vertPos4;
    }
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 varColor;
varying vec2 varTexture;

uniform vec4 color;
uniform bool lighting;
uniform sampler2D tmu;
void main() {
    //gl_FragColor = vec4(varColor,1.0);
    gl_FragColor = texture2D(tmu,varTexture);
    if(lighting){
         gl_FragColor = vec4(1.0);
    }
}`;